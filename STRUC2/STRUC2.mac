
                             COMMENT |

    MACRO-10 Structured Macros, aka "STRUC2"
            by Calvin Miracle, Louisville KY

        STRUC2 was developed to allow a programmer an easier way to express 
        code in DECsystem-10 macro assembler. STRUC2 was designed to have as 
        little impact as possible on other code. 

        STRUC2 was inspired by Robert P. Nix's 1978 contribution to the
        DECUS Program Library, "DECsystem-10 Structured Prgramming Macros".
        His original code can be found in:
        dcus:[43,50500], http://pdp-10.trailing-edge.com/decuslib10-08/index.html 

        Thank you, Robert!

                             | ; end comment

    UNIVERSAL STRUC2 

    ; Set a given stack location to a given value. 
    ; Symbolic 'base' will be '.s' for the STRUC2 macros.
    DEFINE  $SET (BASE, LEVEL, VALUE) <
        BASE'LEVEL=VALUE
    >

    ; Purge an unused stack location, or just abandon it for debugging purposes.
    DEFINE  $PURGE (BASE, LEVEL) <
        IFE <.ftpur-.true>,<
            PURGE BASE'LEVEL
        >
    >

    ; Set a given symbol to the value of a given stack location.
    DEFINE  $GETVAL (SYMBOL, BASE, LEVEL) <
        SYMBOL=BASE'LEVEL
    >

    ; Set a given symbol to the value of top-of-stack,
    ;   then purge/abandon the stack location. 
    ; A pop on an empty stack causes assembly to stop.
    DEFINE  $POP (SYMBOL)<
        IFL <.sPtr>,<
            PRINTX STRUC2 ERROR: POP attempted on an empty stack.
            END 
        >
        $GETVAL (SYMBOL, .s,\.sPtr)
        $PURGE (.s,\.sPtr)
        .sPtr=.sPtr-1
    >

    ; Pop a jump-back address, then implement the jump at the current location.
    DEFINE $POPJB <
        $POP .jback
        jrst .jback
    >

    ; Push a given value onto the structure stack. 
    ; A push onto a full stack causes assembly to stop.
    DEFINE  $PUSH (VALUE) <
        IFG <.sPtr-.sLim>,<
            PRINTX STRUC2 ERROR: PUSH attempted on a full stack.
            END  
        >
        .sPtr=.sPtr+1
        $SET (.s,\.sPtr,VALUE)
    >

    ; A given symbol must be one of the values in a list. 
    ; A flag is set true or false on the result of the test.
    DEFINE  $MUSTBE (SYMBOL, FLAG, LIST) <
        FLAG=.false
        IRP LIST,<
            IFE <SYMBOL-LIST>,< FLAG=.true >
        >
    >

    ; Resolve a jump forward to a following structure part. 
    ; The jump location is at the top of stack. 
    ; For insight into how this macro works, refer to [DMARM] page 3-46.
    DEFINE  $RFORW <
        .here=.                     ; Record the current location in the assembly.
        $POP .jforw                 ; Get the source location of a jump.
        .ORG .jforw                 ; Set the assembly pointer back to the source location.
        jrst .here                  ; Insert a jump to the forward location.
        .ORG                        ; Resume the original line of assembly.
    >

    ; Resolve a number of jumps forward to a following structure part. 
    ; The number of jumps to resolve is at the top of stack.
    DEFINE  $RFORX <
        $POP .njump
        REPEAT <.njump>,<
            $RFORW
        >
    >

    ; Structure condition code: supply the RPN engine with TRUE and FALSE branch 
    ;   points, supply location of an RPN string, then jump into the RPN engine.
    DEFINE $LOGIC (T, F, %string) <
                    movem   1, $$SAVR+1
                    movei   1, T        ; Supply TRUE return point.
                    move    1, $$TRUE  
                    movei   1, F        ; Supply FALSE return point.
                    move    1, $$FALS
                    movei   1, %string  ; Supply beginning of RPN string.
                    jrst    $$REVL      ; Branch into the expression evaluator.
        %string:                        ; Point to an eventual RPN string.
    >

    ; Fully parse a conditional expression into an RPN symbol string.
    DEFINE $PARSE (T1,T2,T3) <
        .plvl=.plvl+1               ; Track parse level for end-of-string symbol.

        IFIDN <T2><AND>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPAN>
        >
        IFIDN <T2><OR>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPOR>
        >
        IFIDN <T2><XOR>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPXO>
        >
        IFIDN <T2><EQV>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPQV>
        >
        IFIDN <T2><IMPL>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPMI>
        >
        IFIDN <T2><EQ>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPEQ>
        >
        IFIDN <T2><NE>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPNE>
        >
        IFIDN <T2><GT>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPGT>
        >
        IFIDN <T2><LT>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPLT>
        >
        IFIDN <T2><GE>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPGE>
        >
        IFIDN <T2><LE>,<
            $PARSE T1
            $PARSE T3
            exp <.op,,$$OPLE>
        >

        IFB <T3>,<
            IFIDN <T1><NOT>,<
                exp 0                   ; Dummy argument to enforce RPN 2-arity.
                $PARSE T2
                exp <.op,,$$OPNO>
            >
            IFB <T2>,<
                .memrf=.true
                IFIDN <T1><TRUE>,<
                    exp .true
                    .memrf=.false
                >
                IFIDN <T1><FALSE>,<
                    exp .false
                    .memrf=.false
                >
                IFE <.memrf-.true>,<
                    exp T1
                >
            >
        >

        .plvl=.plvl-1
        IFE <.plvl>,<
            exp     .erpn               ; Signal end of RPN string.
        >
    >


    ; Call the $STRUC macro before any user calls on structured macros, to 
    ;   initialize workspace variables, manifest constants and feature test 
    ;   symbols, and to provide code to evaluate conditional expressions.
    DEFINE  $STRUC <
            ; Jump around the body of this macro.
                    jrst    $$JOVR

            ; Manifest constants.
        .true= 1                    ; Logic constants.
        .false=0

        .r00=0                      ; Convenient register names.
        .r01=1
        .r02=^O2
        .r03=^O3
        .r04=^O4
        .r05=^O5
        .r06=^O6
        .r07=^O7
        .r10=^O10
        .r11=^O11
        .r12=^O12
        .r13=^O13
        .r14=^O14
        .r15=^O15
        .r16=^O16
        .r17=^O17

            ; Name symbols for use in the structure stack.
        .symbl=  ^O707070           ; A distinctive symbol prefix for listings.
        .purge= .symbl,,^O777777    ; Marks an abandoned stack entry.
        .if=    .symbl,,^O1         ; IF
        .else=  .symbl,,^O2         ; ELSE
        .while= .symbl,,^O3         ; WHILE
        .repeat=.symbl,,^O4         ; REPEAT
        .for=   .symbl,,^O5         ; FOR
        .case1= .symbl,,^O6         ; CASE (virgin, never saw a WHEN)
        .case2= .symbl,,^O7         ; CASE (in a chain of WHENs)
        .case3= .symbl,,^O10        ; CASE (handling a DEFAULT)
        .erpn=  ^O100000,,0         ; RPN string end code.
        .op=    ^O200000            ; Bit prefix to indicate 'an operator'.

            ; Workspace variables.
        .frcod= 0                   ; Current frame activation code from stack.
        .njump= 0
        .jforw= 0
        .jback= 0
        .lpbak= 0                   ; A loopback destination requiring resolution.
        .here=  0                   ; A current value of the location counter.
        .plvl=  0                   ; Parse level of conditional expression.
        .memrf= .false              ; Helps the parser handle memory references.
        .oneof= .false              ; A flag for MUSTBE processing.
        .temp1= 0                   ; Temporary save area during stack edits.
        .temp2= 0                   ; Temporary save area during stack edits.

            ; Structure stack pointer and limit.
        .sPtr= -1                   ; Symbol .s0 is the first location in the stack.
        .sLim= ^O7777               ;   .s0 to .s7777 allows for 4096 symbols.
 
            ; Feature test/debug symbols.
        .ftpur=.false       ; Set .true to purge abandoned stack symbols (normal).
                            ; Set .false to retain abandoned stack symbols (debug).

        .ftfrc=0            ; Set  0, normal evaluation of conditional expressions.
                            ; Set -1, force all conditionals to evaluate FALSE.
                            ; Set  1, force all conditionals to evaluate TRUE.
        
        .ftrpn=.true        ; Set .true for adequate RPN stack size (normal).
                            ; Set .false to force small RPN stack size (debug).


            ; RPN engine for conditional expressions. 
            ;   The heart of the RPN engine, the "Postfix Algorithm", is descibed 
            ;   in [WIKI]. The engine takes an RPN string prepared by $PARSE,
            ;   processes two-argument logic and compare operators, and leaves 
            ;   intermediate results on an internal stack. The final value on 
            ;   the stack is the logic value of the overall structure condition
            ;   expression.
            ;
            ; On entry, the TRUE and FALSE link addresses will have been 
            ;   initialized, and register 1 will point to the RPN string. 
            ;   Registers required by the evaluator are saved on entry and 
            ;   restored on exit, after which an indirect branch will be taken 
            ;   to the proper result link. 
            ;
            ; Error conditions detected are 'too many values on the RPN stack' 
            ;   and 'too few values on the RPN stack'. Runtime errors will report 
            ;   to the TTY and cause the job to halt.

            ; Provision the RPN engine runtime stack.
        $$LEN=^D100                             ; Adequate stack size.
        IFE <.ftrpn-.true>,<                    ; Provision for an inadequate stack.
            $$LEN=^D5
        >
        $$STK:     block   $$LEN

        $$SAVR:     block   ^D16                ; Temp storage for user registers.
        $$REVL:     movem  .r00, $$SAVR+.r00    ; Save working registers...
                  ; movem  .r01, $$SAVR+.r01    ; Accounted for in $LOGIC macro call.
                    movem  .r02, $$SAVR+.r02
                    movem  .r03, $$SAVR+.r03
                    movem  .r04, $$SAVR+.r04
                    movem  .r05, $$SAVR+.r05
                    movem  .r06, $$SAVR+.r06
                    movem  .r07, $$SAVR+.r07
                    movem  .r10, $$SAVR+.r10
                    movem  .r11, $$SAVR+.r11
                    movem  .r12, $$SAVR+.r12
                    movem  .r13, $$SAVR+.r13
                    movem  .r14, $$SAVR+.r14
                    movem  .r15, $$SAVR+.r15
                    movem  .r16, $$SAVR+.r16
                    movem  .r17, $$SAVR+.r17

                    move    .r17, [IOWD $$LEN,$$STK]
                    
            ; While there are tokens left in the RPN string...
        $$LOOP:     move    .r02, .r01
                    camn    .r02, [.erpn]
                      jrst  $$REND

            ; ...consider the current token in register 2. If it's not an 
            ;   operator, push it onto the stack and go back for another token.
                    hlrzm   .r02, .r03    
                    came    .r03, [.op]
                      jrst  $$RSLT

            ; Each operator takes takes two arguments. So error if there are fewer 
            ;   than two values on the stack. Arguments are either a logic value 
            ;   (0 or 1) or a memory reference (high-order halfword = 0); 
        $$ANOP:     hlrem   .r17, .r03
                    camge   .r03, [-$$LEN+^O2]                    
                      jrst  $$ETFV

            ; The sequence of evaluation is 'register_3 OPERATOR register_4'. For 
            ;   NOT, the operation will be performed on register 4, since register 
            ;   3 will contain an arity-dummy value.
            
            ; Pop two argument values from the stack and branch to the proper op 
            ;   evaluation routine. 
                    pop     .r17, .r04          ; Right-hand value.
                    pop     .r17, .r03          ; Left-hand value.
                    hrrzs   .r02                ; Strip .op code from branch address.
                    jrst    @.r02

        $$OPAN:     move    .r02, .r03
                    and     .r02, .r04
                    jrst    $$RSLT

        $$OPOR:     move    .r02, .r03
                    ior     .r02, .r04
                    jrst    $$RSLT

        $$OPNO:     setcm   .r02, .r04                    
                    jrst    $$RSLT

        $$OPXO:     move    .r02, .r03
                    xor     .r02, .r04
                    jrst    $$RSLT

        $$OPQV:     move    .r02, .r03
                    eqv     .r02, .r04
                    jrst    $$RSLT

        $$OPMI:     move    .r02, .r03
                    orcm    .r02, .r04
                    jrst    $$RSLT      

        $$OPEQ:     move    .r02, [.true]
                    came    .r03, .r04
                      move    .r02, [.false]
                    jrst    $$RSLT

        $$OPNE:     move    .r02, [.true]
                    camn    .r03, .r04
                      move    .r02, [.false]
                    jrst    $$RSLT

        $$OPGT:     move    .r02, [.true]
                    camg    .r03, .r04
                      move    .r02, [.false]
                    jrst    $$RSLT

        $$OPLT:     move    .r02, [.true]
                    caml    .r03, .r04
                      move    .r02, [.false]
                    jrst    $$RSLT

        $$OPGE:     move    .r02, [.true]
                    camge   .r03, .r04
                      move    .r02, [.false]
                    jrst    $$RSLT

        $$OPLE:     move    .r02, [.true]
                    camle   .r03, .r04
                      move    .r02, [.false]
                    ; jrst    $$RSLT

            ; Push the returned result back onto the stack and continue.
        $$RSLT:     push    .r17, .r02
                    addi    .r01, [1]            ; Advance the RPN string pointer.
                    jrst    $$LOOP

            ; If there is only one value left on the stack...
        $$REND:     hlrzm   .r17, .r03
                    came    .r03, [-$$LEN+1]
                      jrst  $$ETMV

            ; ...then that value is the result of the RPN calculation.  
            ; The final result may also be forced by a feature-test flag.
                    pop     .r17, .r02
        IFL <.ftfrc>,<
                    move    .r02, [.false]
        >
        IFG <.ftfrc>,<
                    move    .r02, [.true]
        >

            ; Restore user registers and return to structure code.
                    move    .r00, $$SAVR+.r00
                    move    .r01, $$SAVR+.r01
                  ; move    .r02, $$SAVR+.r02
                    move    .r03, $$SAVR+.r03
                    move    .r04, $$SAVR+.r04
                    move    .r05, $$SAVR+.r05
                    move    .r06, $$SAVR+.r06
                    move    .r07, $$SAVR+.r07
                    move    .r10, $$SAVR+.r10
                    move    .r11, $$SAVR+.r11
                    move    .r12, $$SAVR+.r12
                    move    .r13, $$SAVR+.r13
                    move    .r14, $$SAVR+.r14
                    move    .r15, $$SAVR+.r15
                    move    .r16, $$SAVR+.r16
                    move    .r17, $$SAVR+.r17

                    came    .r02, [.true]
                      jrst  $$JF
                    move    .r02, $$SAVR+.r02 
                    jrst    @$$TRUE

            $$JF:   move    .r02, $$SAVR+.r02 
                    jrst    @$$FALS

        $$TRUE:     exp     0       ; Indirect link back to structure TRUE code.
        $$FALS:     exp     0       ; Indirect link back to structure FALSE code.

            ; Handle errors here.
        $$ETMV:     outstr  [asciz /STRUC2 error: Too many values on the RPN stack./]
                    jrst    $$EXIT
        $$ETFV:     outstr  [asciz /STRUC2 error: Too *few* values on the RPN stack./]
                    ; jrst    $$EXIT
        $$EXIT:     reset
                    exit

            ; A branch to here makes the $STRUC body unreachable in-line.
        $$JOVR:
    >

    DEFINE  $IF (UCOND, %T, %F) <
        $LOGIC %T, %F               ; Dump the conditional logic here.
        $PARSE UCOND                ; Parse the conditional expression.
      %F:  exp 0                    ; 'IF false' jump must be resolved later.
      %T:                           ; 'IF true' code follows this label.
        $PUSH %F                    ; Unresolved jump to ELSE or ENDIF.
        $PUSH .if                   ; Open an IF activation frame.
    >

    DEFINE  $ELSE (%ELS, %END) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.if> ; Expect to be in an IF.
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: ELSE was expecting IF.
            END  
        >

      %END:  exp 0                  ; Jump to ENDIF.
      %ELS: $RFORW                  ; Forward resolve 'IF false' jump to %ELS.
        $PUSH %END                  ; Unresolved jump to ENDIF.
        $PUSH .else                 ; Open an ELSE activation frame.
            ; The IF activation frame has been consumed at this point.
    >

    DEFINE  $ENDIF (%END) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.if,.else> ; Expect to be in either IF or ELSE.
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: ENDIF was expecting IF or ELSE.
            END 
        >

      %END: $RFORW                  ; Resolve exit jump from 'IF false' or 'ELSE %END'.
            ; The IF or ELSE activation frame has been consumed at this point.
    >

    DEFINE  $WHILE (UCOND, %T, %F) <
        .lpbak= .                   ; Position the WHILE loopback location.
        $LOGIC %T, %F
        $PARSE UCOND 
      %F:   exp 0 
      %T:   
        $PUSH %F                    ; Unresolved jump to ENDWHILE.
        $PUSH 1                     ; Only one ENDWHILE jump to resolve for now.
        $PUSH .lpbak                ; Unresolved destination to loopback address.
        $PUSH .while                ; Open a WHILE activation frame.
    >

    DEFINE  $ENDWHILE (%BACK, %END) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.while> ; Expect to be in a WHILE.
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: ENDWHILE was expecting WHILE.
            END  
        >

      %BACK:  $POPJB                ; Loop back to beginning of WHILE.
      %END:   $RFORX                ; Resolve all ENDWHILE jumps, including BREAKs.
            ; The WHILE activation frame has been consumed at this point.
    >

    DEFINE  $REPEAT <
        .lpbak= .
        $PUSH 0                     ; No UNTIL jumps to resolve for now.
        $PUSH .lpbak
        $PUSH .repeat
    >

    DEFINE  $UNTIL (UCOND, %T, %F) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.repeat> 
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: UNTIL was expecting REPEAT.
            END  
        >

        $LOGIC %T, %F 
        $PARSE UCOND
      %F: $POPJB
      %T: $RFORX
    >   

    DEFINE  $FOR (LOOPV, START, UCOND, INCR, %T, %F, %FIRST) <
            ; Operations to set LOOPV = start
                    movem   1, $$SAVR+1
                    move    1, START
                    movem   1, LOOPV
                    move    1, $$SAVR+1
                    jrst    %FIRST          ; First iteration is always performed.

        .lpbak= .
            ; Operations to set LOOPV = LOOPV + incr
                    movem   1, $$SAVR+1
                    move    1, INCR
                    addm    1, LOOPV
                    move    1, $$SAVR+1

        $LOGIC %T, %F 
        $PARSE UCOND
      %F:   exp 0
      %T:  %FIRST:
        $PUSH %F
        $PUSH 1 
        $PUSH .lpbak
        $PUSH .for
    >

    DEFINE  $ENDFOR (%BACK, %END) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.for> 
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: ENDFOR was expecting FOR.
            END  
        >

      %BACK:  $POPJB
      %END:   $RFORX
    > 

    DEFINE  $CASE <
        $PUSH .case1                ; Open a new CASE activation frame.
    >

    DEFINE  $WHEN (UCOND, %T, %F, %ENTRY, %END) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.case1,.case2> 
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: WHEN was expecting CASE or WHEN.
            END  
        >

            ; Frame type .case1 has never seen a WHEN clause before now. The chain
            ;   of WHEN clauses begins here with a special WHEN that does not
            ;   have to guard a previous WHEN's branch to ENDCASE.
        IFE <.frcod-.case1>,<
            $LOGIC %T, %F     
            $PARSE UCOND
            %F:    exp 0 
            %T:   
            $PUSH 0                 ; Prepare for ENDCASE jumps to resolve.
            $PUSH %F                ; Establish a link to following WHEN.
            $PUSH .case2            ; Now signal 'non-virgin' WHEN mode.
        >

            ; Frame type .case2 knows that the chain of WHEN clauses should 
            ;   continue, so a jump to ENDCASE is stacked for the previous 
            ;   WHEN clause, via a stack edit.
        IFE <.frcod-.case2>,<
          %END:   exp 0             ; Allow preceding WHEN to get to ENDCASE.
            $POP .temp1             ; Remember the forward link to the next clause.   
            $POP .temp2             ; Get the current number of jumps to resolve...       
            .temp2=.temp2+1         ;        ...and increment it.
            $PUSH %END              ; Another ENDCASE jump for later resolution.
            $PUSH .temp2            ; Push the new jump count.
            $PUSH .temp1            ; Restore the previous 'false' link.
          %ENTRY: $RFORW            ; Resolved from 'false' branch in previous WHEN.
            $LOGIC %T, %F
            $PARSE UCOND
          %F:  exp 0  
          %T: 
            $PUSH %F 
            $PUSH .case2            ; The WHEN chain continues, or may end here.
        >
    >

    DEFINE  $DEFAULT (%ENTRY, %END) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.case2> 
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: DEFAULT was expecting WHEN.
            END  
        >

            ; DEFAULT is just a WHEN without a logic block. DEFAULT must see a 
            ;   previous WHEN clause. Another stack edit completes the chain.
      %END:   exp 0 
        $POP .temp1
        $POP .temp2
        .temp2=.temp2+1
        $PUSH %END
        $PUSH .temp2
        $PUSH .temp1
      %ENTRY: $RFORW
        $PUSH 0                     ; We need a fake forward link here...
        $PUSH .case3                ; WHEN/DEFAULT chain ends here.
    >

    DEFINE  $ENDCASE <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.case1,.case2,.case3>
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: ENDCASE was expecting CASE, WHEN, or DEFAULT.
            END 
        >

        $POP .temp1                 ; Dispose of any remaining forward links.
        $RFORX                      ; Resolve all ENDCASE jumps.
    >

    DEFINE  $BREAK (UCOND, %T, %F) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.while,.repeat,.for> 
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: BREAK was expecting WHILE, REPEAT, or FOR.
            END  
        >

        $LOGIC %T, %F
        $PARSE UCOND
      %T:  exp 0
      %F:   
            ; Edit the current loop activation frame.
        $POP .temp1                 ; Remember the loopback address.
        $POP .temp2                 ; Get the old count of exit jumps...
        .temp2=.temp2+1             ;     ...and increment it.
        $PUSH %T                    ; Insert another exit jump to resolve...
        $PUSH .temp2                ; Store the new count of exit jumps.
        $PUSH .temp1                ; Restore the loopback address.
        $PUSH .frcod                ; Restore the loop frame activation code.
    >

    DEFINE  $CONTINUE (UCOND, %T, %F) <
        $POP .frcod
        $MUSTBE .frcod, .oneof, <.while,.repeat,.for>
        IFE <.oneof-.false>,<
            PRINTX STRUC2 ERROR: CONTINUE was expecting WHILE, REPEAT, or FOR.
            END  
        >

        $LOGIC %T, %F
        $PARSE UCOND
      %T: $POPJB                    ; Use the loopback address for CONTINUE true.
          $PUSH .jback              ; Restore loopback address for later use.
          $PUSH .frcod 
      %F:
    >


            END
